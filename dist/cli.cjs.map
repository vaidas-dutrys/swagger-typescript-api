{"version":3,"sources":["../index.ts"],"names":["templateGenBaseConfig","TemplatesGenConfig","generateTemplatesCommand","defineCommand","HTTP_CLIENT","args","generateTemplates","codeGenBaseConfig","CodeGenConfig","generateCommand","package_default","customConfig","customConfigPath","f","i","consola","error","generateApi","main","runMain"],"mappings":"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","file":"cli.cjs","sourcesContent":["#!/usr/bin/env node\n\nimport * as path from \"node:path\";\nimport * as url from \"node:url\";\nimport { defineCommand, runMain } from \"citty\";\nimport { consola } from \"consola\";\nimport packageJson from \"./package.json\" with { type: \"json\" };\nimport { TemplatesGenConfig } from \"./src/commands/generate-templates/configuration.js\";\nimport { CodeGenConfig } from \"./src/configuration.js\";\nimport { HTTP_CLIENT } from \"./src/constants.js\";\nimport { generateApi, generateTemplates } from \"./src/index.js\";\nimport type { HttpClientType } from \"./types/index.js\";\n\nconst templateGenBaseConfig = new TemplatesGenConfig({});\n\nconst generateTemplatesCommand = defineCommand({\n  meta: {\n    name: \"generate-templates\",\n    description: 'Generate \".ejs\" templates needed for generate api',\n  },\n  args: {\n    \"clean-output\": {\n      type: \"boolean\",\n      description:\n        \"clean output folder before generate template. WARNING: May cause data loss\",\n      default: templateGenBaseConfig.cleanOutput,\n    },\n    debug: {\n      type: \"boolean\",\n      description: \"additional information about processes inside this tool\",\n      default: templateGenBaseConfig.debug,\n    },\n    \"http-client\": {\n      type: \"string\",\n      description: `http client type (possible values: ${Object.values(\n        HTTP_CLIENT,\n      )})`,\n      default: templateGenBaseConfig.httpClientType,\n    },\n    modular: {\n      type: \"boolean\",\n      description:\n        \"generate templates needed to separate files for http client, data contracts, and routes\",\n      default: templateGenBaseConfig.modular,\n    },\n    output: {\n      type: \"string\",\n      alias: \"o\",\n      description: \"output path of generated templates\",\n      default: templateGenBaseConfig.output,\n      required: true,\n    },\n    rewrite: {\n      type: \"boolean\",\n      alias: \"r\",\n      description: \"rewrite content in existing templates\",\n      default: templateGenBaseConfig.rewrite,\n    },\n    silent: {\n      type: \"boolean\",\n      description: \"Output only errors to console\",\n      default: templateGenBaseConfig.silent,\n    },\n  },\n  run: async ({ args }) => {\n    await generateTemplates({\n      cleanOutput: args[\"clean-output\"],\n      httpClientType: args[\"http-client\"] as HttpClientType,\n      modular: args.modular,\n      output: args.output,\n      rewrite: args.rewrite,\n      silent: args.silent,\n      debug: args.debug,\n    });\n  },\n});\n\nconst codeGenBaseConfig = new CodeGenConfig({});\n\nconst generateCommand = defineCommand({\n  meta: {\n    name: \"generate\",\n    description: packageJson.description,\n  },\n  args: {\n    \"add-readonly\": {\n      type: \"boolean\",\n      description: \"generate readonly properties\",\n      default: codeGenBaseConfig.addReadonly,\n    },\n    \"another-array-type\": {\n      type: \"boolean\",\n      description: \"generate array types as Array<Type> (by default Type[])\",\n      default: codeGenBaseConfig.anotherArrayType,\n    },\n    \"api-class-name\": {\n      type: \"string\",\n      description: \"name of the api class\",\n      default: codeGenBaseConfig.apiClassName,\n    },\n    axios: {\n      type: \"boolean\",\n      description: \"generate axios http client\",\n      default: false,\n    },\n    \"clean-output\": {\n      type: \"boolean\",\n      description:\n        \"clean output folder before generate api. WARNING: May cause data loss\",\n      default: codeGenBaseConfig.cleanOutput,\n    },\n    client: {\n      type: \"boolean\",\n      description: \"do not generate an API class\",\n      default: codeGenBaseConfig.generateClient,\n    },\n    \"custom-config\": {\n      type: \"string\",\n      description: \"custom config: primitiveTypeConstructs, hooks, ... \",\n    },\n    debug: {\n      type: \"boolean\",\n      description: \"additional information about processes inside this tool\",\n      default: codeGenBaseConfig.debug,\n    },\n    \"default-as-success\": {\n      type: \"boolean\",\n      alias: \"d\",\n      description:\n        'use \"default\" response status code as success response too. some swagger schemas use \"default\" response status code as success response type by default.',\n      default: codeGenBaseConfig.defaultResponseAsSuccess,\n    },\n    \"default-response\": {\n      type: \"string\",\n      description: \"default type for empty response schema\",\n      default: codeGenBaseConfig.defaultResponseType,\n    },\n    \"disable-throw-on-error\": {\n      type: \"boolean\",\n      description: \"Do not throw an error when response.ok is not true\",\n      default: codeGenBaseConfig.disableThrowOnError,\n    },\n    \"enum-names-as-values\": {\n      type: \"boolean\",\n      description:\n        \"use values in 'x-enumNames' as enum values (not only as keys)\",\n      default: codeGenBaseConfig.enumNamesAsValues,\n    },\n    \"extract-enums\": {\n      type: \"boolean\",\n      description:\n        \"extract all enums from inline interface/type content to typescript enum construction\",\n      default: codeGenBaseConfig.extractEnums,\n    },\n    \"extract-request-body\": {\n      type: \"boolean\",\n      description: \"extract request body type to data contract\",\n      default: codeGenBaseConfig.extractRequestBody,\n    },\n    \"extract-request-params\": {\n      type: \"boolean\",\n      description:\n        \"extract request params to data contract (Also combine path params and query params into one object)\",\n      default: codeGenBaseConfig.extractRequestParams,\n    },\n    \"extract-response-body\": {\n      type: \"boolean\",\n      description: \"extract response body type to data contract\",\n      default: codeGenBaseConfig.extractResponseBody,\n    },\n    \"extract-response-error\": {\n      type: \"boolean\",\n      description: \"extract response error type to data contract\",\n      default: codeGenBaseConfig.extractResponseError,\n    },\n    \"extract-responses\": {\n      type: \"boolean\",\n      description: \"extract all responses described in /components/responses\",\n      default: codeGenBaseConfig.extractResponses,\n    },\n    \"generate-union-enums\": {\n      type: \"boolean\",\n      description: 'generate all \"enum\" types as union types (T1 | T2 | TN)',\n      default: codeGenBaseConfig.generateUnionEnums,\n    },\n    \"http-client\": {\n      type: \"string\",\n      description: `http client type (possible values: ${Object.values(\n        HTTP_CLIENT,\n      )})`,\n    },\n    js: {\n      type: \"boolean\",\n      description: \"generate js api module with declaration file\",\n      default: codeGenBaseConfig.toJS,\n    },\n    modular: {\n      type: \"boolean\",\n      description:\n        \"generate separated files for http client, data contracts, and routes\",\n      default: codeGenBaseConfig.modular,\n    },\n    \"module-name-first-tag\": {\n      type: \"boolean\",\n      description: \"splits routes based on the first tag\",\n      default: codeGenBaseConfig.moduleNameFirstTag,\n    },\n    \"module-name-index\": {\n      type: \"string\",\n      description:\n        \"determines which path index should be used for routes separation (example: GET:/fruits/getFruit -> index:0 -> moduleName -> fruits)\",\n      default: codeGenBaseConfig.moduleNameIndex.toString(),\n    },\n    name: {\n      type: \"string\",\n      alias: \"n\",\n      description: \"name of output typescript api file\",\n      default: codeGenBaseConfig.fileName,\n    },\n    output: {\n      type: \"string\",\n      alias: \"o\",\n      description: \"output path of typescript api file\",\n      default: \"./\",\n    },\n    patch: {\n      type: \"boolean\",\n      description: \"fix up small errors in the swagger source definition\",\n      default: codeGenBaseConfig.patch,\n    },\n    path: {\n      type: \"string\",\n      alias: \"p\",\n      description: \"path/url to swagger scheme\",\n      required: true,\n    },\n    responses: {\n      type: \"boolean\",\n      alias: \"r\",\n      description:\n        \"generate additional information about request responses also add typings for bad responses\",\n      default: codeGenBaseConfig.generateResponses,\n    },\n    \"route-types\": {\n      type: \"boolean\",\n      description: \"generate type definitions for API routes\",\n      default: codeGenBaseConfig.generateRouteTypes,\n    },\n    silent: {\n      type: \"boolean\",\n      description: \"Output only errors to console\",\n      default: codeGenBaseConfig.silent,\n    },\n    \"single-http-client\": {\n      type: \"boolean\",\n      description: \"Ability to send HttpClient instance to Api constructor\",\n      default: codeGenBaseConfig.singleHttpClient,\n    },\n    \"sort-routes\": {\n      type: \"boolean\",\n      description: \"sort routes in alphabetical order\",\n      default: codeGenBaseConfig.sortRoutes,\n    },\n    \"sort-types\": {\n      type: \"boolean\",\n      description: \"sort fields and types\",\n      default: codeGenBaseConfig.sortTypes,\n    },\n    templates: {\n      type: \"string\",\n      alias: \"t\",\n      description: \"path to folder containing templates\",\n    },\n    \"type-prefix\": {\n      type: \"string\",\n      description: \"data contract name prefix\",\n      default: codeGenBaseConfig.typePrefix,\n    },\n    \"type-suffix\": {\n      type: \"string\",\n      description: \"data contract name suffix\",\n      default: codeGenBaseConfig.typeSuffix,\n    },\n    \"unwrap-response-data\": {\n      type: \"boolean\",\n      description: \"unwrap the data item from the response\",\n      default: codeGenBaseConfig.unwrapResponseData,\n    },\n  },\n  run: async ({ args }) => {\n    let customConfig = undefined;\n\n    if (args[\"custom-config\"]) {\n      try {\n        const customConfigPath = url\n          .pathToFileURL(path.resolve(process.cwd(), args[\"custom-config\"]))\n          .toString();\n        customConfig = await import(customConfigPath);\n        customConfig = customConfig.default || customConfig;\n        if (customConfig) {\n          consola.info(`Found custom config at: ${customConfigPath}`);\n        }\n      } catch (error) {\n        consola.error(\"Error loading custom config:\", error);\n      }\n    }\n\n    await generateApi({\n      addReadonly: args[\"add-readonly\"],\n      anotherArrayType: args[\"another-array-type\"],\n      apiClassName: args[\"api-class-name\"],\n      cleanOutput: args[\"clean-output\"],\n      debug: args.debug,\n      defaultResponseAsSuccess: args[\"default-as-success\"],\n      defaultResponseType: args[\"default-response\"],\n      disableThrowOnError: args[\"disable-throw-on-error\"],\n      enumNamesAsValues: args[\"enum-names-as-values\"],\n      extractEnums: args[\"extract-enums\"],\n      extractRequestBody: args[\"extract-request-body\"],\n      extractRequestParams: args[\"extract-request-params\"],\n      extractResponseBody: args[\"extract-response-body\"],\n      extractResponseError: args[\"extract-response-error\"],\n      extractResponses: args[\"extract-responses\"],\n      fileName: args.name,\n      generateClient: args.client,\n      generateResponses: args.responses,\n      generateRouteTypes: args[\"route-types\"],\n      generateUnionEnums: args[\"generate-union-enums\"],\n      httpClientType:\n        args[\"http-client\"] || args.axios\n          ? HTTP_CLIENT.AXIOS\n          : HTTP_CLIENT.FETCH,\n      input: path.resolve(process.cwd(), args.path as string),\n      modular: args.modular,\n      moduleNameFirstTag: args[\"module-name-first-tag\"],\n      moduleNameIndex: +args[\"module-name-index\"] || 0,\n      output: path.resolve(process.cwd(), (args.output as string) || \".\"),\n      patch: args.patch,\n      silent: args.silent,\n      singleHttpClient: args[\"single-http-client\"],\n      sortRoutes: args[\"sort-routes\"],\n      sortTypes: args[\"sort-types\"],\n      templates: args.templates,\n      toJS: args.js,\n      typePrefix: args[\"type-prefix\"],\n      typeSuffix: args[\"type-suffix\"],\n      unwrapResponseData: args[\"unwrap-response-data\"],\n      url: args.path,\n      ...customConfig,\n    });\n  },\n});\n\nconst main = defineCommand({\n  meta: {\n    name: packageJson.name,\n    description: packageJson.description,\n    version: packageJson.version,\n  },\n  subCommands: {\n    generate: generateCommand,\n    \"generate-templates\": generateTemplatesCommand,\n  },\n});\n\nrunMain(main);\n"]}